<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.multicafe.dao.ReviewMapper">
	<resultMap type="Review" id="review_resultMap">
		<result column="review_id" property="reviewId"/>
		<result column="review_date" property="reviewDate"/>
		<result column="user_id" property="userId"/>
		<result column="menu_id" property="menuId"/>
		<result column="cafe_name" property="cafeName"/>
		<result column="menu_name" property="menuName"/>
	</resultMap>
	
	
	<!-- Insert -->
	<insert id="insertReview" parameterType="Review">
	
		insert into review(review_id, review_date, content, good, grade, user_id, menu_id, sweet, bitter, sour) 
		values(review_seq.nextval, sysdate, #{content}, #{good}, #{grade}, #{userId}, #{menuId}, #{sweet}, #{bitter}, #{sour})
	</insert>
	
	<!-- Update -->
	<update id="updateReview" parameterType="Review">
		update review set content=#{content}, grade=#{grade}, sweet=#{sweet}, bitter=#{bitter}, sour=#{sour} where review_id=#{reviewId}
	</update>
	
	
	<!-- Delete -->	
	<delete id="deleteReview" parameterType="java.lang.Integer" >
		delete from review where review_id = #{reviewId}
	</delete>
	
	<!-- ListView -->
	<select id="listViewReview" parameterType="java.lang.Integer" resultMap="review_resultMap">
		select r.review_id, r.review_date, r.content, r.good, r.grade, r.user_id, r.menu_id, r.sweet, r.bitter, r.sour, m.name as menu_name, c.name as cafe_name  
		from review r, menu m, cafe c
		where m.menu_id=#{menuId} and r.menu_id=m.menu_id and m.cafe_id=c.cafe_id
		order by review_date desc
	</select>
	
	<select id="listViewReviewPage" resultMap="review_resultMap">
		<![CDATA[
		select b.rn, b.review_id, b.review_date, b.content, b.good, b.grade, b.user_id, b.menu_id, m.name as menu_name, c.name as cafe_name
		from (select rownum rn, a.review_id, a.review_date, a.content, a.good, a.grade, a.user_id, a.menu_id
    		from(
        		select review_id, review_date, content, good, grade, user_id, menu_id
        		from review
        		where menu_id=#{menuId}
        	order by review_date desc
        	)a
        where rownum <= #{page}*3) b, menu m, cafe c
		where b.rn > #{page}*3-3 and b.menu_id=m.menu_id and m.cafe_id=c.cafe_id
		]]>
	</select>
	
	<!-- ListViewSortByGood -->
	<select id="listViewReviewSortByGood" parameterType="java.lang.Integer" resultMap="review_resultMap">
		select r.review_id, r.review_date, r.content, r.good, r.grade, r.user_id, r.menu_id, r.sweet, r.bitter, r.sour, m.name as menu_name, c.name as cafe_name  
		from review r, menu m, cafe c
		where m.menu_id=#{menuId} and r.menu_id=m.menu_id and m.cafe_id=c.cafe_id
		order by r.good desc
	</select>
	
	<!-- ListMyReview -->
	<select id="listMyReview" parameterType="java.lang.String" resultMap="review_resultMap">
		select r.review_id, r.review_date, r.content, r.good, r.grade, r.user_id, r.menu_id, r.sweet, r.bitter, r.sour, m.name as menu_name, c.name as cafe_name  
		from review r, menu m, cafe c
		where r.user_id=#{userId} and r.menu_id=m.menu_id and m.cafe_id=c.cafe_id
		order by review_date desc
	</select>
	
	<!-- GoodListReview -->
	<select id="goodListReview" parameterType="java.lang.Integer" resultMap="review_resultMap">
		select r.review_id, r.review_date, r.content, r.good, r.grade, r.user_id, r.menu_id, r.sweet, r.bitter, r.sour, m.name as menu_name, c.name as cafe_name  
		from review r, menu m, cafe c
		where r.menu_id=#{menuId} and r.menu_id=m.menu_id and m.cafe_id=c.cafe_id
		order by good desc
	</select>
	
	<!-- plusGood -->
	<update id="plusGood" parameterType="java.lang.Integer">
		update review 
		set good=good+1 
		where review_id=#{reviewId}
	</update>
	
	<!-- minusGood -->
	<update id="minusGood" parameterType="java.lang.Integer">
		update review 
		set good=case when good>0 then good-1 
				else 0
				end
		where review_id=#{reviewId}
	</update>
	

	<!-- Get -->
	<select id="getReview" resultMap="review_resultMap">
		select r.review_id, r.review_date, r.content, r.good, r.grade, r.user_id, r.menu_id, r.sweet, r.bitter, r.sour, r.report, m.name as menu_name, c.name as cafe_name  
		from review r, menu m, cafe c
		where r.menu_id=#{menuId} and r.user_id=#{userId} and r.menu_id=m.menu_id and m.cafe_id=c.cafe_id
	</select>
	
	<select id="getReviewById" resultMap="review_resultMap">
		select r.review_id, r.review_date, r.content, r.good, r.grade, r.user_id, r.menu_id, r.sweet, r.bitter, r.sour, m.name as menu_name, c.name as cafe_name  
		from review r, menu m, cafe c
		where r.review_id=#{reviewId} and r.menu_id=m.menu_id and m.cafe_id=c.cafe_id
	</select>
	
	<!-- Update Report -->
	<update id="updateReport" parameterType="java.lang.Integer">
		update review
		set report = report+1
		where review_id=#{reviewId}
	</update>
	
	<select id="listReportedReview" resultMap="review_resultMap">
		select review_id, review_date, content, good, grade, user_id, menu_id, sweet, bitter, sour, report
		from review
		where report>=2
	</select>
	
</mapper>